# -*- coding: utf-8 -*-
"""chatgpt_attempt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sZ8NxSo5wkOsi_Pga6g91e-XAzfe8Wxo
"""



#######################################################################

# Room Data

class Room:
  def __init__(self, name: str, map: str, 
               north: str, east: str, south: str, west: str):
    self.name = name
    self.map = map
    self.connecting_rooms = {
        "north" : north,
        "east" : east,
        "south" : south,
        "west" : west
    }

  def __str__(self):
    text = self.name + " – " + self.map
    size = len(text) + 2
    return "\n\n" + ('=' * size) + "\n " + text + "\n" + ('=' * size) + "\n"

  def __repr__(self):
    return f"{self.name} – {self.map}"

  def get_connecting_rooms(self):
    return self.connecting_rooms

#######################################################################
import sys
import dataclasses
import openai
import pandas as pd
from typing import Any, Dict, List

### Global Variables / Operations

#Open AI Key
if (len(sys.argv) > 1):
    openai.api_key = sys.argv[1]

# Conditionals
conditions = {
    "test_event" : False,
    "game_over" : False,
    "salute_poster" : False,
    "dining_get_food" : -1,
    "ruins_intro" : False,
    "arrest" : False,
    "tute_screw" : False,
}

# Room Data
rooms = {
    "home" : Room("Dormitory (Home)", "Denizen Hill, Redwood Technical Institution", 
                  "", "streets", "", ""),
    "streets" : Room("Streets of Denizen Hill", "Denizen Hill, Redwood Technical Institution",
                     "", "dining_hall", "", "home"),
    "dining_hall" : Room("Thyme Dining Hall", "Denizen Hill, Redwood Technical Institution",
                     "", "", "", "streets"),
    "ruins1" : Room("Ruins", "Union Remains, Redwood Technical Institution",
                     "", "", "", "ruins2"),
    "ruins2" : Room("Ruins (Area 2)", "Union Remains, Redwood Technical Institution",
                     "", "ruins1", "tempac", ""),
    "tempac" : Room("Tempac", "Tempac, Redwood Technical Institution",
                     "", "", "weapon_room", ""),
    "weapon_room" : Room("Weather Control Room", "Tempac, Redwood Technical Institution",
                     "", "", "", ""),
}

current_room = "home"

# Change Current Room
def set_room(room:str):
  global rooms
  global current_room
  if (room in rooms):
    current_room = room
    print(rooms[current_room])

def move_to_room(direction:str):
  global rooms
  global current_room
  connecting_rooms = rooms[current_room].get_connecting_rooms()
  if (direction in connecting_rooms):
    next_room = connecting_rooms[direction]
    if (next_room in rooms):
      set_room(next_room)
    else:
      print("Invalid Room")

#######################################################################

### Dialogue Action
### Note: new lines are done using #n instead of \n

class Dialogue:
  def __init__(self, speaker: str, text: str, line_ender = '\n'):
    self.speaker = speaker
    self.text = text
    self.line_ender = line_ender
  
  def get_speaker(self):
    return self.speaker
  
  def get_text(self):
    return self.text
  
  def show_text(self, limit: int):
    output = ""
    line_starter = ""
    has_speaker = (self.speaker != "")
    if (has_speaker):
      output = self.speaker + '\n'
      line_starter = "  "

    words = self.text.split()
    curr_line_len = 0

    for word in words:
      if (curr_line_len > limit):
        output += '\n'
        curr_line_len = 0

      if (curr_line_len == 0):
        output += line_starter

      if ('#n' in word):
        split_words = word.split("#n")
        output += split_words[0]
        curr_split_word = 1
        while (curr_split_word < len(split_words)):
          output += '\n' + line_starter + split_words[curr_split_word]
          curr_line_len = len(split_words[curr_split_word])
          curr_split_word += 1
        continue

      curr_line_len += len(word) + 1
      output += word + ' '
    print(output + self.line_ender)

#######################################################################

class Events:
  def __init__(self):
    self.events = []
  
  def add_event(self, event_type: str, event):
    self.events.append((event_type, event))

  def process_event(self, actionType: str, action):
    global conditions
    # Display Dialogue ("dialogue", dialogue)
    if (actionType == "dialogue"):
      action.show_text(72)
    # Set Conditional ("conditional", (str, val))
    elif (actionType == "conditional"):
      conditions[action[0]] = action[1]
    # Branching Dialogue ("branch", [((conditional, state), Events)])
    # Uses the first valid dialogue
    elif (actionType == "branch"):
      for branch in action:
        if (conditions[branch[0][0]] == branch[0][1]):
          branch[1].process_events()
          break
    elif (actionType == "branch_func"):
      for branch in action:
        if (conditions[branch[0][0]] == branch[0][1]):
          branch[1]()
          break
    # Set Room ("room", str)
    elif (actionType == "room"):
      set_room(action)
    # Move to Room ("move", str)
    elif (actionType == "move"):
      move_to_room(action)
    # get user input ("input", (str, function))
    elif (actionType == "input"):
      user_input = input(action[0] + " ")
      if (action[1] != ""):
        action[1](user_input)
    # Continue to Next Event
    elif (actionType == "continue"):
      continue_text = "\nPress Enter to Continue... "
      if (action != ""):
        continue_text = action
      user_input = input(continue_text)
    elif (actionType == "invalid"):
      invalid_text = "Invalid action. Please try again. "
      if (action != ""):
        invalid_text = action
      print(invalid_text)
    # get user input ("input", (str, function))
    elif (actionType == "function"):
      action()
    # get user input ("game_over", "")
    elif (actionType == "game_over"):
      conditions["game_over"] = True
      print("\n[[ GAME OVER ]]\n")
  
  def process_events(self):
    i = 0
    while i < len(self.events):
      self.process_event(self.events[i][0], self.events[i][1])
      i = i + 1

#######################################################################

### ACTION TESTS

### print (conditions)
### 
### # Test Event
### events = Events()
### events.add_event("room", "home")
### events.add_event("dialogue", Dialogue("", "OPENER", "\n"))
### events.add_event("dialogue", Dialogue("speaker", "text", "\n"))
### events.add_event("dialogue", Dialogue("speaker 2", "abcdefg#nasdf"))
### events.add_event("dialogue", Dialogue(" ", "abcdefg", "\n"))
### 
### # Branches Start
### branch1 = Events()
### branch1.add_event("dialogue", Dialogue("", "Branch 1", ""))
### branch1.add_event("dialogue", Dialogue("", "Exiting Branch 1"))
### 
### branch2 = Events()
### branch2.add_event("dialogue", Dialogue("", "Branch 2", ""))
### branch2.add_event("dialogue", Dialogue("", "Exiting Branch 2"))
### 
### events.add_event("branch", [(("test_event", True), branch1), 
###                             (("test_event", False), branch2)])
### # Branches End
### 
### events.add_event("dialogue", Dialogue("", "Setting Conditional", ""))
### events.add_event("conditional", ("test_event", True))
### 
### events.add_event("branch", [(("test_event", True), branch1), 
###                             (("test_event", False), branch2)])
### events.add_event("move", "west")
### events.add_event("move", "east")
### events.add_event("dialogue", Dialogue("", "ROOM OPENER", ""))
### events.add_event("move", "east")
### events.add_event("input", ("PROMPT: ", (lambda x: print(x+x+x))))
### events.add_event("function", (lambda: print("ASDF")))
### events.process_events()
### 
### print (conditions)

#######################################################################

### MOVEMENT EVENTS
def movement(x:str, north, east, south, west, default):
  ove_events = Events()
  ove_events.add_event("dialogue", Dialogue("", "",""))
  ove_events.process_events();

  x = x.lower()
  if (x == "" or x.isspace()):
    default

  ft_model = 'ft:davinci-002:personal:rti-movement-v2:9kLKMmJE'
  res = openai.Completion.create(model=ft_model, prompt=x + ' ->', max_tokens=1, temperature=0)
  action = res['choices'][0]['text']
  #action = x
  
  if ("north" in action):
    north()
  elif ("west" in action):
    west()
  elif ("south" in action):   # Repeatedly going south puts player into infinite loop
    south();
  elif ("east" in action):
    east()
  else:
    default()

#######################################################################

### DORM EVENTS

def dorm_event():
  def dorm_event_salute(x:str):
    x = x.lower()
    dorm_salute = Events()
    if (x == "" or x.isspace()):
      dorm_salute.add_event("input", ("", dorm_event_salute))
    else:
      ft_model = 'ft:davinci-002:personal:rti-poster:9kMaDBz5'
      res = openai.Completion.create(model=ft_model, prompt=x + ' ->', max_tokens=1, temperature=0)
      action = res['choices'][0]['text']
      
      dorm_salute.add_event("dialogue", Dialogue("", "", ""))
      if ("yes" in action):
        dorm_salute.add_event("dialogue", Dialogue("", "You raise your arm and try to give a proud, but ultimately lackluster, salute."))
        dorm_salute.add_event("dialogue", Dialogue("You", "Praise be to Redwood. Long live Thornwood…"))
        dorm_salute.add_event("dialogue", Dialogue("", "You lower your arm and droop your shoulders.  You’re tired after all from serving your “beloved” institution.", ""))
        dorm_salute.add_event("conditional", ("salute_poster", True))
      elif ("no" in action):
        dorm_salute.add_event("dialogue", Dialogue("", "You decide not to salute to the “Honorable” Charlene Thornwood, instead choosing to disrespect it.  Deep down, you don’t agree with what Thornwood has done to your beloved world.", ""))
        dorm_salute.add_event("conditional", ("salute_poster", False))
      else:
        dorm_salute.add_event("invalid", "")
        dorm_salute.add_event("input", ("", dorm_event_salute))
    dorm_salute.process_events()

  def dorm_event_door(x:str):
    dorm_door = Events()
    if (x == "" or x.isspace()):
      dorm_door.add_event("input", ("", dorm_event_door))
      dorm_door.process_events()
      return

    ft_model = 'ft:davinci-002:personal:rti-leave-room:9kMZtScf'
    res = openai.Completion.create(model=ft_model, prompt=x + ' ->', max_tokens=1, temperature=0)
    action = res['choices'][0]['text']

    if ("yes" in action):
      dorm_door.add_event("room", "streets")
    else:
      dorm_door.add_event("dialogue", Dialogue("", "You decided not to leave your room yet.", ""))
      dorm_door.add_event("input", ("", dorm_event_door))
    dorm_door.process_events()
    

  dorm_events = Events()
  dorm_events.add_event("dialogue", Dialogue("", "#n The year is 2230, and under the iron fist of the Honorable Charlene Thornwood, the once small college of Redwood Technical Institution (RTI) has taken over the world. Since the institution’s seizure of power, all civilians have been placed under constant surveillance through their SIS system; however, many people can slip on through due to the system’s unstable connection.  These people have banded together to form the SISMen and seek to free the people of RTI’s tyranny.", ""))
  dorm_events.add_event("continue", "")
  dorm_events.add_event("room", "home")
  dorm_events.add_event("dialogue", Dialogue("", "You wake up to the droning sound of your alarm, amplifying your already pounding headache.  Once again, another low-sleep night.  Another cloudy day as it has been since RTI had taken over.  Looks like it may rain today."))
  dorm_events.add_event("dialogue", Dialogue("", "“Another day in paradise,” you mockingly greet the world."))
  dorm_events.add_event("dialogue", Dialogue("", "You get out of bed and take some medicine to try to ease the pain and get ready for your daily duties to Redwood."))
  dorm_events.add_event("dialogue", Dialogue("", "As you look outside of your window, you see RTI's Tempac building, the institution's most prized building despite being relatively new.  Though, while you, nor any citizen for that matter, has ever really been in there, the daily morning mail reminds you that the institution is doing important work there."))
  dorm_events.add_event("dialogue", Dialogue("", "On your way out, you pass by your RTI issued poster of the Honorable Charlene Thornwood, prominently displayed in your room as per RTI regulations.  And as per your duties as a Redwood citizen, among perfectly obeying all other laws, you must hail the poster to “show your love and support for your valiant president.”"))

  dorm_events.add_event("input", ("What do you do?", dorm_event_salute))
  dorm_events.add_event("continue", "")
  dorm_events.add_event("dialogue", Dialogue("", "", ""))

  dorm_events.add_event("dialogue", Dialogue("", "Hopefully, things will change, and you and everyone you care about would finally properly rest and the sun can finally shine again."))
  dorm_events.add_event("dialogue", Dialogue("", "But that’s enough of your fanciful musings."))
  dorm_events.add_event("dialogue", Dialogue("", "You’re already running late to your daily meal, but more importantly, you promised you’d meet Johnny at Thyme Dining Hall.  Better fuel up for another tiring day of serving your “beloved” institution."))
  #dorm_events.add_event("dialogue", Dialogue("", "", "\n"))

  dorm_events.add_event("input", ("Between you and the start of your daily duties is your door.", dorm_event_door))

  dorm_events.process_events()

#######################################################################

### STREET EVENTS

def streets_event():
  global conditions
  def streets_event_bridge():
    streets_bridge_events = Events()
    streets_bridge_events.add_event("dialogue", Dialogue("", "Going on for miles in front of you stands the gated off Bridge.  Past there are the Union Remains, a once thriving settlement full of free thinkers.  Of course, President Thornwood couldn't have that."))
    streets_bridge_events.add_event("dialogue", Dialogue("", "Or at least, that’s what the rumors say."))
    if (conditions["dining_get_food"] > -1):
      streets_bridge_events.add_event("dialogue", Dialogue("", "Curious for answers, you decide to cross the bridge and investigate the Union Ruins.", ""))
      streets_bridge_events.add_event("continue","")
      streets_bridge_events.add_event("dialogue", Dialogue("", "", ""))
      streets_bridge_events.add_event("dialogue", Dialogue("", "Halfway across the bridge, you hear shouting from behind you."))
      streets_bridge_events.add_event("dialogue", Dialogue("Johnny", "Wait!  What are you doing?  "))
      streets_bridge_events.add_event("dialogue", Dialogue("You", "I’m going to the ruins.  Maybe there I can finally be free.  "))
      streets_bridge_events.add_event("dialogue", Dialogue("Johnny", "It’s not safe out there.  And what if you get caught? ", ""))
      streets_bridge_events.add_event("continue","")
      streets_bridge_events.add_event("dialogue", Dialogue("", "", ""))
      streets_bridge_events.add_event("dialogue", Dialogue("", "From behind Johnny, you see a group of OmniSafe Officers.  The two of you make it to the ruins to avoid being caught, Johnny panicking the entire time."))
    else:
      streets_bridge_events.add_event("continue","")
      streets_bridge_events.add_event("dialogue", Dialogue("", "", ""))
    streets_bridge_events.process_events()
    if (conditions["dining_get_food"] < 0):
      streets_event()

  def streets_event_dorm():
    streets_dorm_events = Events()
    if (conditions["dining_get_food"] > -1):
      streets_dorm_events.add_event("dialogue", Dialogue("", "There's nothing for you to get from your dorm."))
    else:
      streets_dorm_events.add_event("dialogue", Dialogue("", "You just came from your dorm.  No point in going back.  Better meet up with Johnny before you need to start work.", ""))
    streets_dorm_events.add_event("continue","")
    streets_dorm_events.add_event("dialogue", Dialogue("", "", ""))
    streets_dorm_events.process_events()
    streets_event()

  def streets_event_dining():
    def streets_event_officer_salute(x:str):
      x = x.lower()
      officer_salute = Events()
      if (x == "" or x.isspace()):
        officer_salute.add_event("input", ("", streets_event_officer_salute))
      else:
        ft_model = 'ft:davinci-002:personal:rti-poster:9kMaDBz5'
        res = openai.Completion.create(model=ft_model, prompt=x + ' ->', max_tokens=1, temperature=0)
        action = res['choices'][0]['text']

        officer_salute.add_event("dialogue", Dialogue("", "", ""))
        if ("yes" in action):
          officer_salute.add_event("dialogue", Dialogue("You", "Praise be to Redwood! Long live Thornwood!"))
          officer_salute.add_event("dialogue", Dialogue("", "The officer nods with a slight grunt, signaling you to carry on.  A wave of relief washes over you.  You lower your arm and pass the officer, avoiding any contact with them.  Though, you still feel their gaze piercing you.  You try not to think much of it and make your way into the line of citizens for entering the Dining Hall.", ""))
          officer_salute.add_event("continue", "")
          officer_salute.add_event("room", "dining_hall")
        elif ("no" in action):
          officer_salute.add_event("dialogue", Dialogue("", "The OmniSafe Officer mechanically marches over to you.  A sense of dread washes over you as they pull out a heavy, metal baton from their holster.  Today, they will make an example out of you to show the rest of the citizens what happens when you disrespect RTI and the Honorable Charlene Thornwood."))
          officer_salute.add_event("game_over", "")
        else:
          officer_salute.add_event("invalid", "")
          officer_salute.add_event("input", ("", streets_event_officer_salute))
      officer_salute.process_events()
    
    streets_dining_events = Events()
    if (conditions["dining_get_food"] > -1):
      streets_dining_events.add_event("dialogue", Dialogue("", "Thyme Dining Hall is closed at these hours.", ""))
      streets_dining_events.add_event("continue","")
      streets_dining_events.add_event("dialogue", Dialogue("", "", ""))
    else:
      streets_dining_events.add_event("dialogue", Dialogue("", "As you make your way to the Dining Hall, you encounter an OmniSafe Officer between you and the Dining Hall entrance.  Like all officers, their stern and study body stand almost dormant, but you knew that despite not being able to see their eyes, behind the visor shades, you know you are being watched for they are the eyes of the institution and of the Honorable Charlene Thornwood."))
      streets_dining_events.add_event("input", ("What do you do?", streets_event_officer_salute))
    streets_dining_events.process_events()
    if (conditions["dining_get_food"] > -1):
      streets_event()
  
  def streets_move(x:str):  # Repeatedly going south puts player into infinite loop
    movement(x, streets_event, streets_event_dorm, streets_event_bridge, streets_event_dining, streets_event)
  
  streets_events = Events()
  streets_events.add_event("input", ("You may travel:\n > west\n > south \n > east\n", streets_move))
  streets_events.process_events()

#######################################################################

### DINING HALL EVENTS

def dining_hall_event():
  def dining_hall_food(x:str):
    x = x.lower()
    food_events = Events()
    food_events.add_event("dialogue", Dialogue("", "",""))

    ft_model = 'ft:davinci-002:personal:rti-movement-v2:9kLKMmJE'
    res = openai.Completion.create(model=ft_model, prompt=x + ' ->', max_tokens=1, temperature=0)
    action = res['choices'][0]['text']

    if (x == "" or x.isspace()):
      food_events.add_event("input", ("", dining_hall_food));
    elif ("toast" in action):
      food_events.add_event("dialogue", Dialogue("", "You go over to the bread box and grab a slice of bread.  The bread’s a bit moldy today, but that’s no different than usual.  And on top of that, the toaster’s broken again.  That’s fine.  You can just cut the green bits off."))
      food_events.add_event("conditional", ("dining_get_food", 1))
    elif ("eggs" in action):
      food_events.add_event("dialogue", Dialogue("", "Rubbery and soapy-tasting like always.  These “eggs” as you’re told are the only bit of protein you can get consistently; though, you often wonder if these really are made from eggs.  People used to find shells in the “eggs,” but recently, no one has seen any shells in the food or near the kitchen."))
      food_events.add_event("conditional", ("dining_get_food", 2))
    elif ("berries" in action):
      food_events.add_event("dialogue", Dialogue("", "You go to the produce station to get an assortment of berries.  An unresponsive server stares at you vacantly."))
      food_events.add_event("dialogue", Dialogue("You", "Berries, please."))
      food_events.add_event("dialogue", Dialogue("", "The server opens the container of berries, grips a handful of them, and dumps them onto a plate. While they might not be washed and are now mushy, these berries are the only way to get the taste of something sweet here, assuming the berries are ripe that day."))
      food_events.add_event("conditional", ("dining_get_food", 3))
    elif ("hungry" in action):
      food_events.add_event("dialogue", Dialogue("", "After looking at the options in front of you today and always, you decide not to get anything."))
      food_events.add_event("conditional", ("dining_get_food", 0))
    else:
      food_events.add_event("invalid", "")
      food_events.add_event("input", ("", dining_hall_food))

    food_events.process_events()

  dining_events = Events()
  dining_events.add_event("dialogue", Dialogue("", "Once admitted, you see three stations in front of you as well as the dining area.  Your stomach growls."))
  dining_events.add_event("input", ("In front of you are the usual options:\n Toast\n Eggs?\n Berries\nOr, you can skip breakfast.\n\nWhat will it be today?", dining_hall_food))

  branch_toast = Events()
  branch_toast.add_event("dialogue", Dialogue("", "You make your way to the dining area to find Johnny, all the while tearing green parts off of your bread.", ""))
  branch_eggs = Events()
  branch_eggs.add_event("dialogue", Dialogue("", "With a plate of supposedly eggs, you make your way to the dining area to find Johnny.", ""))
  branch_berries = Events()
  branch_berries.add_event("dialogue", Dialogue("", "You grab a spoon for your mush and make your way to the dining area to find Johnny.", ""))
  branch_hungry = Events()
  branch_hungry.add_event("dialogue", Dialogue("", "Despite being hungry, you have flashbacks to previous times trying your options and gag.  You head to the dining area to find Johnny.", ""))


  dining_events.add_event("branch", [(("dining_get_food", 1), branch_toast),
                                     (("dining_get_food", 2), branch_eggs),
                                     (("dining_get_food", 3), branch_berries),
                                     (("dining_get_food", 0), branch_hungry)])
  
  dining_events.add_event("continue", "")
  dining_events.add_event("dialogue", Dialogue("", "", ""))
  dining_events.add_event("dialogue", Dialogue("", "Off in the corner of the dining area sat Johnny, back to the walls and eyes nervously darting around.  You approach him, and as you do, he seems to calm down."))

  dining_events.add_event("dialogue", Dialogue("Johnny", "There you are.  You had me worried for a sec."))
  dining_events.add_event("dialogue", Dialogue("You", "Why's that?  I told you that I was going to come today."))
  dining_events.add_event("dialogue", Dialogue("Johnny", "Haven’t you heard?  The morning mail said that the Sismen have been active in the Union Ruins recently.  We were told to be on the lookout for any suspicious characters that have crossed the bridge and onto campus.  They’re probably going to try and spread some of that “Save the Institution” propaganda again.  "))

  dining_saluted = Events()
  dining_saluted.add_event("dialogue", Dialogue("You", "Yeah, probably.  Hopefully OmniSafe can get rid of them soon.  Anyways, we should hurry up, we don’t want to be late for our duties."))
  dining_saluted.add_event("dialogue", Dialogue("", "You and Johnny left Thyme Dining Hall and made your way to your duties to serve Redwood Technical Institution."))
  dining_saluted.add_event("game_over", "")

  dining_not_saluted = Events()
  dining_not_saluted.add_event("dialogue", Dialogue("You", "I don’t know.  Maybe they have a point. There’s so much we don’t know about RTI, and it feels like every day is another miserable day of stress and mistreatment."))
  dining_not_saluted.add_event("dialogue", Dialogue("Johnny", "Be careful saying stuff like that!  What if an OmniSafe Officer was here?  They might think you’re a Sisman.  "))
  dining_not_saluted.add_event("dialogue", Dialogue("You", "I just want to finally rest, Johnny.  I can’t deal with this place any longer."))
  dining_not_saluted.add_event("dialogue", Dialogue("", "A message is played over the PA, indicating that dining hours are over.  You, Johnny, and the rest of the citizens are forced out of Thyme Dining Hall."))
  dining_not_saluted.add_event("continue","")
  dining_not_saluted.add_event("room", "streets")
  
  dining_events.add_event("branch", [(("salute_poster", True), dining_saluted), 
                                     (("salute_poster", False), dining_not_saluted)])

  ### TO BE CONTINUED
  #dining_events.add_event("dialogue", Dialogue("", "\n[[TO BE CONTINUED...]]\n"))

  # def null_func(x:str):
  #   return
  # dining_events.add_event("input", ("", null_func))
  
  dining_events.process_events()

#######################################################################

# RUINS EVENTS

def ruins_event():
  def ruins_move(x:str):  # Repeatedly going south puts player into infinite loop
    def ruins_north():
      def pre_arrest():
        pre_arrest = Events()
        pre_arrest.add_event("dialogue", Dialogue("", "In front of you is the bridge. You decide to turn back.  You come across the OmniSafe Officers who were pursuing you.  They ignored Johnny’s attempts at explanation and subdued the two of you."))
        pre_arrest.add_event("dialogue", Dialogue("", "You were arrested under the pretext that you were suspected to be a part of the Sismen."))
        pre_arrest.add_event("dialogue", Dialogue("", "All that’s left is to accept your fate at the hands of the institution."))
        pre_arrest.add_event("game_over", "")
        pre_arrest.process_events()
      def post_arrest():
        post_arrest = Events()
        post_arrest.add_event("dialogue", Dialogue("", "In front of you is the bridge. You decide to turn back.  You come across an OmniSafe Officer."))
        post_arrest.add_event("dialogue", Dialogue("", "You were quickly subdued and arrested under the pretext that you were working with the Sismen."))
        post_arrest.add_event("dialogue", Dialogue("", "All that’s left is to accept your fate at the hands of the institution."))
        post_arrest.add_event("game_over", "")
        post_arrest.process_events()
      
      north = Events()
      north.add_event("branch_func", [(("arrest", True), post_arrest), 
                                     (("arrest", False), pre_arrest)])
      north.process_events()

    def ruins_east():
      east = Events()
      east.add_event("dialogue", Dialogue("", "Charred buildings everywhere.  You suspect that people used to live here.  Among the wreckage, you find mysterious characters.  Though, It’s all Greek to you.", ""))
      east.add_event("continue","")
      east.add_event("dialogue", Dialogue("", "", ""))
      east.process_events()
      ruins_event()
    def ruins_west():
      def pre_tute_screw():
        def pre_arrest():
          pre_arrest = Events()
          pre_arrest.add_event("dialogue", Dialogue("Johnny", "What do you suppose that is?"))
          pre_arrest.add_event("dialogue", Dialogue("You", "Not sure. Maybe I’ll take it.", ""))
          pre_arrest.add_event("continue","")
          pre_arrest.add_event("dialogue", Dialogue("", "", ""))
          pre_arrest.add_event("dialogue", Dialogue("", "You open the case and take out the screw.  "))
          pre_arrest.add_event("dialogue", Dialogue("", "You acquired a large screw.  ", ""))
          pre_arrest.process_events()
        def post_arrest():
          post_arrest = Events()
          post_arrest.add_event("dialogue", Dialogue("You", "That must be it.  The Tute Screw."))
          post_arrest.add_event("dialogue", Dialogue("", "You break open the case and grab the screw.  "))
          post_arrest.add_event("dialogue", Dialogue("", "You acquired the Tute Screw. ", ""))
          post_arrest.process_events()

        pre_tute = Events()
        pre_tute.add_event("dialogue", Dialogue("", "Most of the rooms have already been emptied, but deep within the castle, you find a large screw displayed in a large glass case. "))
        pre_tute.add_event("branch_func", [(("arrest", True), post_arrest), 
                                     (("arrest", False), pre_arrest)])
        pre_tute.add_event("conditional", ("tute_screw", True))
        pre_tute.add_event("continue","")
        pre_tute.add_event("dialogue", Dialogue("", "", ""))
        pre_tute.process_events()

      def post_tute_screw():
        post_tute = Events()
        post_tute.add_event("dialogue", Dialogue("", "Most of the rooms have already been emptied.  There’s nothing here of interest.", ""))
        post_tute.add_event("continue","")
        post_tute.add_event("dialogue", Dialogue("", "", ""))
        post_tute.process_events()
        
      west = Events()
      west.add_event("dialogue", Dialogue("", "The remains of an old castle appear before you."))
      west.add_event("branch_func", [(("tute_screw", True), post_tute_screw), 
                                     (("tute_screw", False), pre_tute_screw)])
      west.process_events()
      ruins_event()

    def ruins_south():
      def pre_arrest():
        def pre_tute_screw():
          pre_tute = Events()
          pre_tute.add_event("dialogue", Dialogue("J", "However, we can’t do it ourselves.  We need to find a special screw.  "))
          pre_tute.add_event("dialogue", Dialogue("You", "A screw?"))
          pre_tute.add_event("dialogue", Dialogue("J", "They called it the Tute Screw, a prototype weapon once used by RTI.  Legend has it that no matter which way it’s turned, the screw only drives deeper. #nI’ve been exploring these ruins trying to find that screw.  Why don’t you help me find it?  We can meet back here.  Good luck."))
          pre_tute.add_event("dialogue", Dialogue("", "You exit the tunnels.  Time to find that screw.", ""))
          pre_tute.add_event("continue","")
          pre_tute.add_event("dialogue", Dialogue("", "", ""))
          pre_tute.process_events()
          ruins_event()
        def post_tute_screw():
          post_tute = Events()
          post_tute.add_event("dialogue", Dialogue("", "J notices the screw.  You forgot you still had it. "))
          post_tute.add_event("dialogue", Dialogue("J", "That screw?  Where’d you find it?"))
          post_tute.add_event("dialogue", Dialogue("You", "I found it in some castle.  Why?"))
          post_tute.add_event("dialogue", Dialogue("J", "The Stronghold. Of course. ‘Cause that’s the key to takin’ down RTI!  That’s the Tute Screw! #nIt’s a prototype weapon once used by RTI.  Legend has it that no matter which way it’s turned, the screw only drives deeper. #nWe can take the tunnels to Tempac and free the world from RTI. "))
          post_tute.add_event("dialogue", Dialogue("You", "For Johnny and everyone who's fallen victim to RTI!"))
          post_tute.process_events()
        pre_arrest = Events()
        pre_arrest.add_event("dialogue", Dialogue("", "Continuing your exploration of the long-forgotten memories of a pre-RTI-ruled world, you hear marching behind you. You turn around to see a unit of OmniSafe Officers patrolling the area, and you can only assume that they’re here for you and Johnny.  They spot you and are running towards you."))
        pre_arrest.add_event("dialogue", Dialogue("", "You and Johnny try to outrun the officers.", ""))
        pre_arrest.add_event("continue","")
        pre_arrest.add_event("dialogue", Dialogue("", "", ""))
        pre_arrest.add_event("dialogue", Dialogue("", "In the vast expanse of debris, you see the mysterious figure from before cloaked in rags.  In the distance, they wave to you to come closer.  "))
        pre_arrest.add_event("dialogue", Dialogue("You", "Johnny!  Follow me.", ""))
        pre_arrest.add_event("continue","")
        pre_arrest.add_event("dialogue", Dialogue("", "", ""))
        pre_arrest.add_event("dialogue", Dialogue("", "You run towards the rag-covered individual.", ""))
        pre_arrest.add_event("continue","")
        pre_arrest.add_event("dialogue", Dialogue("", "", ""))
        pre_arrest.add_event("dialogue", Dialogue("", "Johnny hesitates.", ""))
        pre_arrest.add_event("continue","")
        pre_arrest.add_event("dialogue", Dialogue("", "", ""))
        pre_arrest.add_event("dialogue", Dialogue("", "You make it to your savior, who gestures to a hole leading to an underground tunnel."))
        pre_arrest.add_event("dialogue", Dialogue("Mysterious Person", "This way."))
        pre_arrest.add_event("dialogue", Dialogue("You", "Johnny, we..."))
        pre_arrest.add_event("dialogue", Dialogue("", "You turn around to find Johnny a several meters away, terrified, frozen in place.", ""))
        pre_arrest.add_event("continue","")
        pre_arrest.add_event("dialogue", Dialogue("", "", ""))
        pre_arrest.add_event("dialogue", Dialogue("You", "Johnny! Come on!"))
        pre_arrest.add_event("dialogue", Dialogue("", "By that point, the OmniSafe Officers caught up with Johnny."))
        pre_arrest.add_event("dialogue", Dialogue("Mysterious Person", "There’s no time. He chose his fate."))
        pre_arrest.add_event("dialogue", Dialogue("", "In an instance, you were snatched by the mysterious individual and brought into the tunnel.  From the distance, you hear Johnny's screams of terror. And then, everything went blank.", ""))
        pre_arrest.add_event("continue","")
        pre_arrest.add_event("dialogue", Dialogue("", "", ""))
        pre_arrest.add_event("conditional", ("arrest", True))
        pre_arrest.add_event("dialogue", Dialogue("", "You can’t help but think about Johnny.  After some time, the mysterious person lit a lamp, illuminating the tunnel."))
        pre_arrest.add_event("dialogue", Dialogue("Mysterious Person", "We made it out alive, and that's what’s important.  You’re welcome, by the way. "))
        pre_arrest.add_event("dialogue", Dialogue("You", "Johnny was innocent.  "))
        pre_arrest.add_event("dialogue", Dialogue("Mysterious Person", "And so were many others, but RTI doesn't care.  And now those poor souls either dead or being experimented on. "))
        pre_arrest.add_event("dialogue", Dialogue("You", "And how do you know?"))
        pre_arrest.add_event("dialogue", Dialogue("Mysterious Person", "You can call me J.  I’m the leader of the Sismen.  Or, I used to be.  The title’s merely for show nowadays.  Most of my comrades were either killed or tortured by the hands of OmniSafe and RTI.  And that’s why people like us must continue fighting: to bring an end to RTI and to avenge our fallen friends.  "))
        pre_arrest.add_event("dialogue", Dialogue("You", "So, what can I do? "))
        pre_arrest.add_event("dialogue", Dialogue("J", "RTI maintains their power using a weather control system.  You might know it better as Tempac.  We need to break in and destroy it.  "))
        
        pre_arrest.add_event("branch_func", [(("tute_screw", True), post_tute_screw), 
                                     (("tute_screw", False), pre_tute_screw)])
        pre_arrest.process_events()
      def post_arrest():
        def pre_tute_screw():
          pre_tute = Events()
          pre_tute.add_event("dialogue", Dialogue("J", "Any luck?"))
          pre_tute.add_event("dialogue", Dialogue("You", "Not yet."))
          pre_tute.add_event("dialogue", Dialogue("J", "Let’s keep looking.  Good luck out there. "))
          pre_tute.add_event("dialogue", Dialogue("", "You exit the tunnels.  Hopefully, we can find that screw fast. For Johnny.", ""))
          pre_tute.add_event("continue","")
          pre_tute.add_event("dialogue", Dialogue("", "", ""))
          pre_tute.process_events()
          ruins_event()
        def post_tute_screw():
          post_tute = Events()
          post_tute.add_event("dialogue", Dialogue("", "J notices the screw.  "))
          post_tute.add_event("dialogue", Dialogue("J", "That’s it! The Tute Screw.  Good job.  We take the tunnels to Tempac.  Let’s put an end to RTI."))
          post_tute.add_event("dialogue", Dialogue("You", "For Johnny and everyone who's fallen victim to RTI!", ""))
          post_tute.add_event("continue","")
          post_tute.add_event("dialogue", Dialogue("", "", ""))
          post_tute.process_events()
        pre_arrest = Events()
        post_arrest = Events()
        post_arrest.add_event("dialogue", Dialogue("", "You look around.  The coast is clear.  You make your way into the tunnels.", ""))
        post_arrest.add_event("continue","")
        post_arrest.add_event("dialogue", Dialogue("", "", ""))
        post_arrest.add_event("branch_func", [(("tute_screw", True), post_tute_screw), 
                                     (("tute_screw", False), pre_tute_screw)])
        post_arrest.process_events()
      south = Events()
      south.add_event("branch_func", [(("arrest", True), post_arrest), 
                                     (("arrest", False), pre_arrest)])
      south.process_events()
      
    movement(x, ruins_north, ruins_east, ruins_south, ruins_west, ruins_event)
  
  def ruins_explore():
    explore_events = Events()
    explore_events.add_event("input", ("You may travel:\n > north\n > west\n > south \n > east\n", ruins_move))
    explore_events.process_events()

  def ruins_intro():
    ruin_event = Events()
    ruin_event.add_event("room","ruins1")
    ruin_event.add_event("dialogue", Dialogue("", "In front of you are debris and broken buildings, covered in torn and faded “Save the Institution” posters.  You once heard that this was the last bastion of freedom in the institution before RTI began their conquest.  But now, it’s just a wasteland."))
    ruin_event.add_event("dialogue", Dialogue("", "You look behind you. There are no signs of the OmniSafe Officers.", ""))
    ruin_event.add_event("continue", "")
    ruin_event.add_event("dialogue", Dialogue("", "", ""))
    ruin_event.add_event("dialogue", Dialogue("You", "Phew. I think we lost them."))
    ruin_event.add_event("dialogue", Dialogue("Johnny", "No. No. No. How could this be happening? Do you think they saw our faces?  We should go back.  Maybe everything will be alright if I explain what happened…", ""))
    ruin_event.add_event("continue", "")
    ruin_event.add_event("dialogue", Dialogue("", "", ""))
    ruin_event.add_event("dialogue", Dialogue("", "Towards the south, you see a humanoid figure in rags. You rub your eyes to adjust, but the mysterious person was gone.  "))
    ruin_event.add_event("dialogue", Dialogue("You", "Hey, Johnny, did you see someone there?"))
    ruin_event.add_event("dialogue", Dialogue("Johnny", "Huh?  I-I don’t know. Um."))
    ruin_event.add_event("dialogue", Dialogue("", "Johnny's trembling. "))
    ruin_event.add_event("dialogue", Dialogue("", "But, now that you're in the ruins, all you can do is explore...", ""))
    ruin_event.add_event("conditional", ("ruins_intro", True))
    ruin_event.add_event("continue", "")
    ruin_event.add_event("dialogue", Dialogue("", "", ""))
    ruin_event.process_events()
    ruins_explore()
  
  ruin_events = Events()
  ruin_events.add_event("branch_func", [(("ruins_intro", True), ruins_explore), 
                                     (("ruins_intro", False), ruins_intro)])
  ruin_events.process_events()


#######################################################################

### TEMPAC EVENTS
def tempac_event():
  tempac_events = Events()
  tempac_events.add_event("room","tempac")
  tempac_events.add_event("dialogue", Dialogue("", "You exit out of a steam tunnel at the base of Tempac.  Towering before you stands the one-way glass building.  Between these walls and you is the weather control machine.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("J", "Ready?"))
  tempac_events.add_event("dialogue", Dialogue("", "You nod.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "You take out the Tute Screw, place its tip onto the glass wall, and begin turning.  The torque of the screw was immeasurable.  In only a matter of seconds was it able to break through the walls.  Now all you need to do is climb to the top of the tower and shut down the machine."))
  tempac_events.add_event("dialogue", Dialogue("", "As you and J make your way inside several patrolling OmniSafe Officers are alerting of your presence.  Between J’s combat skills and the screw, you were able to dispatch them.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("???", "Hmph.  How annoying."))
  tempac_events.add_event("dialogue", Dialogue("J", "That voice.  Charlene, show yourself!"))
  tempac_events.add_event("dialogue", Dialogue("President Thornwood", "That’s the Honorable Charlene Thornwood, you insolent savages! #n Tempac, my empire.  These are my most proud creations among my many greatest accomplishments. #n To think that I would let you storm in here and stop me so easily would be bold of you to assume!#n Amuse me.  Try and stop me.  OmniSafe, terminate them!"))
  tempac_events.add_event("dialogue", Dialogue("", "At that moment, alarms went off, and red lights began flashing.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "You and J climbed higher and higher up the glass tower, defeating wave after wave of OmniSafe Officers.  Only one floor left between you and the machine. "))
  tempac_events.add_event("dialogue", Dialogue("", "More guards were coming your way.  "))
  tempac_events.add_event("dialogue", Dialogue("J", "They just don’t stop coming.  I’ll take care of the guards.  Don’t worry about me.  Just end this nightmare.  "))
  tempac_events.add_event("dialogue", Dialogue("", "You climb the final stairwell and approach the metal door, the final obstacle separating you and the weather control machine.  You hear J fighting in the distance.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "You place the Tute Screw onto the keypad and turn the screw deeper and deeper.  You finally hear the keypad break and the door open.  You enter and the door closes behind you.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "There, before you, illuminated by the red lights, was a giant machine that connected to the roof of the building.  That must be it.  The weather control machine."))
  tempac_events.add_event("dialogue", Dialogue("", "But between you and the machine was none other than President Thornwood. ", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("President Thornwood", "My officers couldn’t stop you?  How pathetic.  #n You could have served my nation well, maybe becoming a great OmniSafe Officer.  But, oh well.  There’s no point in harping on what could have been.  Only what is.  "))
  tempac_events.add_event("dialogue", Dialogue("You", "Out of the way Thornwood.  I’m destroying that machine.  "))
  tempac_events.add_event("dialogue", Dialogue("President Thornwood", "That’s the Honorable Charlene Thornwood to you!  No matter.  A mutual friend of ours has something they would like to say to you.  Though, he may be a bit different than when you abandoned him.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "President Thornwood presses a button on a remote.  A glass tube filled with a mysterious fluid rises out from the floor in front of you.  "))
  tempac_events.add_event("dialogue", Dialogue("President Thornwood", "Look who it is, Johnny.  Apprehend them. "))
  tempac_events.add_event("dialogue", Dialogue("", "The glass tube shattered, leaking fluid onto the floor.  Miraculously, before you stood Johnny.  But, he was different.  His eyes were vacant and his limbs appeared to be made of metal.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("You", "Johnny..."))
  tempac_events.add_event("dialogue", Dialogue("Johnny?", "Shut up, abandoner.  I serve Honorable Charlene Thornwood and RTI.  As per the request, I shall subdue you."))
  tempac_events.add_event("dialogue", Dialogue("", "At the moment, Johnny lunges towards you, punching a hole into the metal door behind you. ", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("You", "Johnny, it’s me.  What did they do to you? "))
  tempac_events.add_event("dialogue", Dialogue("Johnny?", "I’ve become the tool that RTI desired. I’ve become perfect. And soon, so shall you and everyone in this world.  Now, accept your fate like I did mine."))
  tempac_events.add_event("dialogue", Dialogue("You", "Johnny.  This isn’t you.  Look at what they’ve made you.  You’re ill.  We can stop Thornwood and get you better.  Please, Johnny.  ", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "Johnny hesitated.  You could see a little bit of life return to his eyes.  "))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "I... must..."))
  tempac_events.add_event("dialogue", Dialogue("President Thornwood", "Enough of this.  I am your master.  You will do as I command.  Stop them! ", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "President Thornwood pressed a button on her remote. "))
  tempac_events.add_event("dialogue", Dialogue("", "Johnny screamed in agony.  And lunged at you.  "))
  tempac_events.add_event("dialogue", Dialogue("You", "I’m sorry, Johnny."))
  tempac_events.add_event("dialogue", Dialogue("", "You hold out the Tute Screw, which pierces Johnny’s mechanical shoulder.  You turn and turn as Johnny tries to move closer to you.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "Finally, the screw breaks off his arm.  Johnny falls.  "))
  tempac_events.add_event("dialogue", Dialogue("", "You make your way to President Thornwood and destroy the remote.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("You", "Johnny, look at what they’ve done to you. "))
  tempac_events.add_event("dialogue", Dialogue("", "Johnny looks at his fallen arm and focuses on the reflection of himself through the arm.  The haze in his eyes faded.  "))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "What have I become?  This isn’t perfection.  Everything… I’ve lost everything.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "Johnny looks to President Thornwood.  "))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "You.  You’ve turned me into this!"))
  tempac_events.add_event("dialogue", Dialogue("", "Johnny pounces at Thornwood and pins her down.  He looks at you.  "))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "For me, for everyone wronged by this tyrant, destroy that machine.  "))
  tempac_events.add_event("dialogue", Dialogue("", "You smile at Johnny."))
  tempac_events.add_event("dialogue", Dialogue("You", "I'm glad you're back.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "Now in front of the machine, you ram the Tute Screw into the machine and begin turning.  President Thornwood shouts at you from a distance, but you don’t stop.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "Finally, everyone will be free.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "With the Tute Screw thoroughly driven into the machine, a warning message is displayed."))
  tempac_events.add_event("dialogue", Dialogue("Weather Control Machine", "Warning: Tempac malfunctioning.  ", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "The room became hotter.  "))
  tempac_events.add_event("dialogue", Dialogue("President Thornwood", "Release me!  The machine’s overheating.   The entire building will be destroyed!"))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "Then we’ll both go down together.  ", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "Johnny looks at you and smiles."))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "Leave and finally be free."))
  tempac_events.add_event("dialogue", Dialogue("", "You hesitate.  "))
  tempac_events.add_event("dialogue", Dialogue("Johnny", "GO!", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "You leave the room and pass by J.  The two of you escape Tempac and watch as the building collapses, the Tute Screw, Thornwood, and Johnny buried underneath the rubble.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "For the first time since RTI took over, the clouds parted and the sun shined.", ""))
  tempac_events.add_event("continue", "")
  tempac_events.add_event("dialogue", Dialogue("", "", ""))
  tempac_events.add_event("dialogue", Dialogue("", "You will never forget what RTI took from you, but now, you will usher in a new era, free from Thornwood and RTI’s tyranny."))
  tempac_events.process_events()
  

#######################################################################

### MAIN GAME EVENTS

def game_events():
  global conditions
  if (len(sys.argv) > 1):
      events = [dorm_event, streets_event, dining_hall_event, streets_event, ruins_event, tempac_event]

      i = 0
      while (i < len(events) and not conditions["game_over"]):
        events[i]()
        i = i + 1
  else:
      print("ERROR: Open AI API Key required as command line argument!")

game_events()